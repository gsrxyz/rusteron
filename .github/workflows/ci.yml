name: CI

on:
  push:
#  push:
#    branches: [master, staging, trying]
#  pull_request:
#    branches: [master]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  lint:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    name: Lint
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt

      # aeron archive cmake for some reason starts java
      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Check clippy lints
        run: cargo clippy --all -- --deny warnings

      - name: Check docs
        run: |
          sudo apt-get update && sudo apt-get install -y uuid-dev libbsd-dev
          cargo test --doc

  AddressSanitiser:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    name: AddressSanitiser
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y curl pkg-config libssl-dev libbsd-dev uuid-dev ca-certificates make cmake gcc g++ clang zlib1g-dev libbsd-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly-2024-12-05
          components: rust-src

      # aeron archive cmake for some reason starts java
      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Test on Linux with ASan
        run: |
          rustup toolchain install nightly-2024-12-05
          rustup component add rust-src --toolchain nightly-2024-12-05

          # Use explicit cargo via +toolchain, but DO NOT override RUSTC (breaks host proc-macro builds)
          # Also avoid global RUSTFLAGS so host tools (proc-macros/build scripts) are not ASan-instrumented.
          unset RUSTFLAGS
          unset RUSTDOCFLAGS
          export RUSTUP_TOOLCHAIN=nightly-2024-12-05
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUSTFLAGS="-Zsanitizer=address -Cforce-frame-pointers=yes"
          export RUSTC="$(rustup which rustc --toolchain nightly-2024-12-05)" 
          export ASAN_OPTIONS=detect_leaks=1,abort_on_error=1 
          export CFLAGS="-fsanitize=address" RUSTFLAGS="-Zsanitizer=address" 
          "$(rustup which cargo --toolchain nightly-2024-12-05)" -Z build-std test --workspace --all --all-targets -- --nocapture

  build:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    name: Build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    strategy:
      fail-fast: true
      matrix:
#        os: [ubuntu-latest, macos-latest, macos-13, windows-latest]
        os: [ubuntu-22.04, macos-latest, macos-13]
        features: [default, static]
        rust-version: ["stable"]

    env:
      feature-flags: ${{ matrix.features != 'default' && format('--features {0}', matrix.features) || '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust-version }}
          components: clippy, rustfmt

      - name: Install dependencies on Ubuntu
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y curl pkg-config libssl-dev libbsd-dev uuid-dev ca-certificates make cmake gcc g++ clang zlib1g-dev libbsd-dev

      # aeron archive cmake for some reason starts java
      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Clean artifacts on Linux and macOS
        if: runner.os != 'Windows'
        run: rm -rf rusteron-archive/artifacts rusteron-client/artifacts rusteron-media-driver/artifacts

      - name: Clean artifacts on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Remove-Item -LiteralPath 'rusteron-archive/artifacts','rusteron-client/artifacts','rusteron-media-driver/artifacts' -Recurse -Force -ErrorAction SilentlyContinue

      - name: Build
        env:
          PUBLISH_ARTIFACTS: true
        run: |
          cargo build --release --workspace ${{ env.feature-flags }}

      - name: Test
        run: |
          cargo test --workspace --all --all-targets ${{ env.feature-flags }} -- --nocapture

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}-${{ matrix.features }}
          retention-days: 1
          path: |
            rusteron-archive/artifacts
            rusteron-client/artifacts
            rusteron-media-driver/artifacts

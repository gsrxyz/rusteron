name: CI

on:
  push:
#  push:
#    branches: [master, staging, trying]
#  pull_request:
#    branches: [master]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  lint:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt

      # aeron archive cmake for some reason starts java
      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Check clippy lints
        run: cargo clippy --all -- --deny warnings

      - name: Check docs
        run: |
          sudo apt-get update && sudo apt-get install -y uuid-dev
          cargo test --doc

  build:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    name: Build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
#        os: [ubuntu-latest, macos-latest, macos-13, windows-latest]
#        os: [ubuntu-latest, macos-latest, macos-13]
        os: [ubuntu-latest]
        features: [static]
#        features: [default, static]
        rust-version: ["stable"]

    env:
      feature-flags: ${{ matrix.features != 'default' && format('--features {0}', matrix.features) || '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust-version }}
          components: clippy, rustfmt

      # aeron archive cmake for some reason starts java
      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Clean artifacts on Linux and macOS
        if: runner.os != 'Windows'
        run: rm -rf rusteron-archive/artifacts rusteron-client/artifacts rusteron-media-driver/artifacts

      - name: Clean artifacts on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Remove-Item -LiteralPath 'rusteron-archive/artifacts','rusteron-client/artifacts','rusteron-media-driver/artifacts' -Recurse -Force -ErrorAction SilentlyContinue

      - name: Build and Test
        if: runner.os == 'Linux'
        env:
          PUBLISH_ARTIFACTS: true
          CC_x86_64_unknown_linux_musl: musl-gcc
          CXX_x86_64_unknown_linux_musl: musl-gcc
          PKG_CONFIG_ALLOW_CROSS_x86_64_unknown_linux_musl: 1
          PKG_CONFIG_ALLOW_CROSS: 1
          C_INCLUDE_PATH: /usr/include
          CPLUS_INCLUDE_PATH: /usr/include
        run: |
          sudo apt-get update && sudo apt-get install -y curl pkg-config libssl-dev ca-certificates make cmake gcc g++ clang libclang-dev llvm-dev musl-tools musl-dev libbsd-dev uuid-dev default-jdk
          rustup target add x86_64-unknown-linux-musl
          curl -LO https://ziglang.org/download/0.14.1/zig-x86_64-linux-0.14.1.tar.xz
          tar xf zig-x86_64-linux-0.14.1.tar.xz
          export PATH="$PWD/zig-x86_64-linux-0.14.1:$PATH"
          cargo install --locked cargo-zigbuild
          #cargo install cross --locked
          cargo zigbuild --release --target x86_64-unknown-linux-musl ${{ env.feature-flags }}
          # cross test  --release --target x86_64-unknown-linux-musl ${{ env.feature-flags }} -- --nocapture

      - name: Build and Test
        if: runner.os != 'Linux'
        env:
          PUBLISH_ARTIFACTS: true
        run: |
          cargo build --release --workspace ${{ env.feature-flags }}
          cargo test --workspace --all --all-targets ${{ env.feature-flags }} -- --nocapture

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}-${{ matrix.features }}
          retention-days: 1
          path: |
            rusteron-archive/artifacts
            rusteron-client/artifacts
            rusteron-media-driver/artifacts